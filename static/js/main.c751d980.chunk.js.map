{"version":3,"sources":["components/menu-item/MenuItem.jsx","components/directory/Directory.jsx","pages/homepage/HomePage.jsx","App.js","serviceWorker.js","index.js"],"names":["withRouter","title","imageUrl","size","history","match","linkUrl","className","onClick","push","url","style","backgroundImage","toUpperCase","Directory","state","sections","id","loading","this","map","otherprops","key","React","Component","HomePage","HatsPage","props","console","log","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iaAuBeA,G,YAAAA,YAlBE,SAAC,GAAwD,IAAtDC,EAAqD,EAArDA,MAAOC,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,QACzD,OACE,yBACEC,UAAS,UAAKJ,EAAL,cACTK,QAAS,kBAAMJ,EAAQK,KAAR,UAAgBJ,EAAMK,KAAtB,OAA4BJ,MAE3C,yBAAKC,UAAU,mBACfI,MAAO,CACLC,gBAAgB,OAAD,OAASV,EAAT,QAEjB,yBAAKK,UAAU,WACb,wBAAIA,UAAU,SAAUN,EAAMY,eAC9B,0BAAMN,UAAU,YAAhB,iBC0COO,E,YArDb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,SAAU,CACR,CACEf,MAAO,OACPC,SAAU,oCACVe,GAAI,EACJX,QAAS,aAEX,CACEL,MAAO,UACPC,SAAU,uCACVe,GAAI,EACJX,QAAS,gBAEX,CACEL,MAAO,WACPC,SAAU,wCACVe,GAAI,EACJX,QAAS,iBAEX,CACEL,MAAO,SACPC,SAAU,sCACVC,KAAM,QACNc,GAAI,EACJX,QAAS,eAEX,CACEL,MAAO,OACPC,SAAU,mCACVC,KAAM,QACNc,GAAI,EACJX,QAAS,cAGbY,SAAS,GAtCC,E,sEA2CZ,OACE,yBAAKX,UAAU,kBACZY,KAAKJ,MAAMC,SAASI,IAAI,gBAAGH,EAAH,EAAGA,GAAOI,EAAV,6BACvB,kBAAC,EAAD,eAAUC,IAAKL,GAAQI,W,GA/CTE,IAAMC,WCOfC,EARE,WACf,OACE,yBAAKlB,UAAU,YACb,kBAAC,EAAD,QCAAmB,EAAW,SAACC,GAEhB,OADAC,QAAQC,IAAIF,GACL,0CAcMG,MAXf,WACE,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWR,IACjC,kBAAC,IAAD,CAAOO,KAAK,aAAaC,UAAWP,OCLxBQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAShC,MACvB,2DCXNiC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.c751d980.chunk.js","sourcesContent":["import React from 'react'\nimport { withRouter } from 'react-router-dom'\n\nimport './MenuItem.scss'\n\nconst MenuItem = ({ title, imageUrl, size, history, match, linkUrl }) => {\n  return (\n    <div\n      className={`${size} menu-item`} \n      onClick={() => history.push(`${match.url}${linkUrl}`)}\n      >\n      <div className='background-image' \n      style={{\n        backgroundImage: `url(${imageUrl})`\n      }} />\n      <div className='content'>\n        <h1 className='title'>{ title.toUpperCase() }</h1>\n        <span className='subtitle'>SHOP NOW</span>\n      </div>\n    </div>\n  )\n}\n\nexport default withRouter(MenuItem)","import React from 'react'\nimport './Directory.scss'\n\nimport MenuItem from '../menu-item/MenuItem'\n\nclass Directory extends React.Component {\n  constructor() {\n    super()\n\n    this.state = {\n      sections: [\n        {\n          title: 'hats',\n          imageUrl: 'https://i.ibb.co/cvpntL1/hats.png',\n          id: 1,\n          linkUrl: 'shop/hats'\n        },\n        {\n          title: 'jackets',\n          imageUrl: 'https://i.ibb.co/px2tCc3/jackets.png',\n          id: 2,\n          linkUrl: 'shop/jackets'\n        },\n        {\n          title: 'sneakers',\n          imageUrl: 'https://i.ibb.co/0jqHpnp/sneakers.png',\n          id: 3,\n          linkUrl: 'shop/sneakers'\n        },\n        {\n          title: 'womens',\n          imageUrl: 'https://i.ibb.co/GCCdy8t/womens.png',\n          size: 'large',\n          id: 4,\n          linkUrl: 'shop/womens'\n        },\n        {\n          title: 'mens',\n          imageUrl: 'https://i.ibb.co/R70vBrQ/men.png',\n          size: 'large',\n          id: 5,\n          linkUrl: 'shop/mens'\n        }\n      ],\n      loading: false\n    }\n  }\n\n  render() {\n    return (\n      <div className='directory-menu'>\n        {this.state.sections.map(({ id, ...otherprops }) => (\n          <MenuItem key={id} {...otherprops} />\n        ))}\n      </div>\n    )\n  }\n}\n\nexport default Directory;","import React from 'react'\nimport './HomePage.scss'\nimport Directory from '../../components/directory/Directory'\n\nconst HomePage = () => {\n  return (\n    <div className='homepage'>\n      <Directory />\n    </div>\n  )\n}\n\nexport default HomePage;","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport './App.css'\nimport './fonts/fonts.css'\nimport HomePage from './pages/homepage/HomePage'\n\nconst HatsPage = (props) => {\n  console.log(props)\n  return <h1>Hats Page</h1>\n}\n\nfunction App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path='/' component={HomePage} />\n        <Route path='/shop/hats' component={HatsPage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}